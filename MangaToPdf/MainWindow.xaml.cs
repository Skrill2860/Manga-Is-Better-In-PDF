using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Ookii.Dialogs.Wpf;
using System.Globalization;
using System.Threading;
using System.Diagnostics;

namespace MangaToPdf
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private string directoryZipPath = "";

        public MainWindow()
        {
            InitializeComponent();
            CultureInfo ci = new CultureInfo("en-US");
            Thread.CurrentThread.CurrentCulture = ci;
            Thread.CurrentThread.CurrentUICulture = ci;
            PathTextBox.Text = "No path is chosen";
        }

        private void ChooseDirButton_Click(object sender, RoutedEventArgs e)
        {
            VistaFolderBrowserDialog folderBrowserDialog = new();
            folderBrowserDialog.Multiselect = false;
            string path = Directory.GetCurrentDirectory();
            directoryZipPath = path;
            folderBrowserDialog.SelectedPath = path;
            if (folderBrowserDialog.ShowDialog() is null ? false : true)
            {
                path = folderBrowserDialog.SelectedPath;
                directoryZipPath = path;
            } else
            {
                path = "No path is chosen";
            }
            PathTextBox.Text = path;
        }

        void PrintLogInfo(string message = "")
        {
            LogTextBox.Dispatcher.Invoke(() => {
                LogTextBox.AppendText($"{message}\n");
                LogTextBox.ScrollToEnd();
            });
        }

        void ClearLog()
        {
            LogTextBox.Dispatcher.Invoke(() => {
                LogTextBox.Clear();
            });
        }

        /// <summary>
        /// Converts all zip files in folder to PDF files.
        /// Zip files must be in format that is usually used by MangaLib.
        /// Resulting PDFs are stored in "zipFolderPath/output".
        /// </summary>
        /// <param name="zipFolderPath">Path to folder that contains zip files downloaded from MangaLib.</param>
        private void ZipToPdf(string zipFolderPath)
        {
            Process process = new Process();
#if DEBUG
            process.StartInfo.FileName = @"..\..\..\py-env\Scripts\python.exe";
            process.StartInfo.ArgumentList.Add(@"..\..\..\python_executables\converter.py");
#else
            process.StartInfo.FileName = @"..\..\..\python_executables\dist\converter.exe";
#endif
            process.StartInfo.ArgumentList.Add(@"z"); // signal we want to use conversion from zip
            process.StartInfo.ArgumentList.Add(zipFolderPath); // path to folder with zips
            process.StartInfo.CreateNoWindow = true; // We don't need new window
            process.StartInfo.UseShellExecute = false;// Do not use OS shell
            process.StartInfo.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            process.StartInfo.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)

            process.OutputDataReceived += (s, e) => PrintLogInfo(e.Data);
            process.ErrorDataReceived += (s, e) => PrintLogInfo(e.Data);

            process.Start();
            process.BeginOutputReadLine();
            process.BeginErrorReadLine();
            process.WaitForExit();
        }

        private void ConvertToPdfButton_Click(object sender, RoutedEventArgs e)
        {
            // TODO: REMEMBER TO STORE PROCESSES AND KILL THEM IF APP HAS BEEN CLOSED
            new Thread(() => ZipToPdf(directoryZipPath)).Start();
        }
    }
}
