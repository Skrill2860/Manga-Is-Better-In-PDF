using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Threading;
using System.Windows;
using System.Windows.Media;
using MangaToPdf.UIElements;
using Ookii.Dialogs.Wpf;

namespace MangaToPdf
{
    /// <summary>
    ///     Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private Dictionary<string, ProcessInfo> CurrentRunningProcessesDict = new();
        private string directoryZipPath = "";

        public MainWindow()
        {
            InitializeComponent();
            CultureInfo ci = new CultureInfo("en-US");
            Thread.CurrentThread.CurrentCulture = ci;
            Thread.CurrentThread.CurrentUICulture = ci;
            PathTextBox.Text = "No path is chosen";
            Closed += MainWindow_Closed;
        }

        private void MainWindow_Closed(object sender, EventArgs e)
        {
            foreach (ProcessInfo processInfo in CurrentRunningProcessesDict.Values)
            {
                processInfo.Process.Kill();
            }
        }

        private void ChooseDirButton_Click(object sender, RoutedEventArgs e)
        {
            VistaFolderBrowserDialog folderBrowserDialog = new();
            folderBrowserDialog.Multiselect = false;
            if (directoryZipPath == "" || !Directory.Exists(directoryZipPath))
            {
                string path = Directory.GetCurrentDirectory();
                directoryZipPath = path;
            }
            folderBrowserDialog.SelectedPath = directoryZipPath;
            bool? res = folderBrowserDialog.ShowDialog();
            if (res.HasValue ? res.Value : false)
            {
                PathTextBox.Text = folderBrowserDialog.SelectedPath;
            }
            else
            {
                PathTextBox.Text = "Папка не выбрана";
            }

        }

        /// <summary>
        ///     Converts all zip files in folder to PDF files.
        ///     Zip files must be in format that is usually used by MangaLib.
        ///     Resulting PDFs are stored in "zipFolderPath/output".
        /// </summary>
        /// <param name="zipFolderPath">Path to folder that contains zip files downloaded from MangaLib.</param>
        private void StartConversionAsync(string zipFolderPath, TaskListItem taskListItem)
        {
            Process process = new Process();
            lock (CurrentRunningProcessesDict)
            {
#if DEBUG
                process.StartInfo.FileName = @"..\..\..\py-env\Scripts\python.exe";
                process.StartInfo.ArgumentList.Add(@"..\..\..\python_executables\converter.py");
#else
                process.StartInfo.FileName = @"converter.exe";
#endif
                process.StartInfo.ArgumentList.Add(@"z"); // signal we want to use conversion from zip
                process.StartInfo.ArgumentList.Add(zipFolderPath); // path to folder with zips
                process.StartInfo.CreateNoWindow = true; // We don't need new window
                process.StartInfo.UseShellExecute = false; // Do not use OS shell
                process.StartInfo.RedirectStandardOutput =
                    true; // Any output, generated by application will be redirected back
                process.StartInfo.RedirectStandardError =
                    true; // Any error in standard output will be redirected back (for example exceptions)
                process.EnableRaisingEvents = true; // Allow events, to handle process ending
                process.Exited += new EventHandler(
                    (object sender, EventArgs e) =>
                    {
                        lock (CurrentRunningProcessesDict)
                        {
                            if (!CurrentRunningProcessesDict.ContainsKey(zipFolderPath))
                            {
                                return;
                            }

                            CurrentRunningProcessesDict[zipFolderPath].Finished = true;
                            Dispatcher.Invoke(new Action(() =>
                            {
                                taskListItem.CancelButton.Background =
                                    (SolidColorBrush) new BrushConverter().ConvertFromString("#198754");
                                taskListItem.CancelButton.Foreground = Brushes.White;
                                taskListItem.CancelButton.Content = "Закрыть";
                            }));
                        }
                    });

                // Connect and setup UI Controller
                process.OutputDataReceived += (s, e) =>
                {
                    if (taskListItem is { })
                        taskListItem.PrintLogInfo(e.Data);
                };
                process.ErrorDataReceived += (s, e) =>
                {
                    if (taskListItem is { })
                        taskListItem.PrintLogInfo(e.Data);
                };
                taskListItem.CancelButton.Click += new RoutedEventHandler(
                    (object sender, RoutedEventArgs e) =>
                    {
                        lock (CurrentRunningProcessesDict)
                        {
                            if (!CurrentRunningProcessesDict.ContainsKey(zipFolderPath))
                            {
                                TaskListPanel.Children.Remove(taskListItem);
                                return;
                            }

                            if (CurrentRunningProcessesDict[zipFolderPath].Finished)
                            {
                                CurrentRunningProcessesDict.Remove(zipFolderPath);
                                TaskListPanel.Children.Remove(taskListItem);
                                return;
                            }

                            MessageBoxResult result = MessageBox.Show(
                                "После отмены конвертацию нельзя будет продолжить с места остановки. При повторном запуске конвертацииобработка начнется с нуля. Продолжить?",
                                "Отмена конвертации",
                                MessageBoxButton.YesNo);
                            if (result != MessageBoxResult.Yes)
                            {
                                return;
                            }

                            CurrentRunningProcessesDict[zipFolderPath].Process.Kill();
                            CurrentRunningProcessesDict.Remove(zipFolderPath);
                            TaskListPanel.Children.Remove(taskListItem);
                        }
                    });

                CurrentRunningProcessesDict.Add(zipFolderPath, new ProcessInfo(process));
            }

            process.Start();
            process.BeginOutputReadLine();
            process.BeginErrorReadLine();
        }

        private void ConvertToPdfButton_Click(object sender, RoutedEventArgs e)
        {
            if (!Directory.Exists(directoryZipPath))
            {
                MessageBox.Show("Такой папки не существует.");
                return;
            }

            if (CurrentRunningProcessesDict.ContainsKey(directoryZipPath))
            {
                MessageBox.Show("Эта манга уже конвертируется.");
                return;
            }

            TaskListItem taskListItem = new();
            TaskListPanel.Children.Add(taskListItem);
            new Thread(() => StartConversionAsync(directoryZipPath, taskListItem)).Start();
        }

        private class ProcessInfo
        {
            public ProcessInfo(Process p)
            {
                Process = p;
                Finished = false;
            }

            public Process Process { get; init; }
            public bool Finished { get; set; }
        }

        private void PathTextBox_TextChanged(object sender, System.Windows.Controls.TextChangedEventArgs e)
        {
            directoryZipPath = PathTextBox.Text;
        }
    }
}